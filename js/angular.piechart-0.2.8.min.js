/**@license
 *
 * Angular piechart is a angular component that create svg based piecharts - version 0.2.8
 *
 * Copyright (c) 2016 Jakub Jankiewicz <http://jcubic.pl/me>
 * Released under the MIT license
 *
 * Date: Sun, 29 Jul 2018 16:32:10 +0000
 */
(function(r,t){"use strict";if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=t(require("angular"))}else if(typeof define==="function"&&define.amd){define(["angular"],t)}else{t(r.angular)}})(this,function(r){"use strict";var t=r.module("piechart",[]);var e;function s(r,t,e,a){var n=a*Math.PI/180;return{x:r+e*Math.cos(n),y:t+e*Math.sin(n)}}function o(r,t,e,a,n){var o=s(r,t,e,n);var l=s(r,t,e,a);var c=n-a<=180?"0":"1";var i=["M",o.x,o.y,"A",e,e,0,c,0,l.x,l.y,"L",r,t,"L",o.x,o.y,"Z"].join(" ");return i}if(/Edge\/\d.|MSIE/i.test(navigator.userAgent)){e='<svg viewBox="0 0 32 32" ng-style="{\'background-color\': vm.color}">'+'<path id="circle-{{$index}}" ng-attr-d="{{vm.arc(16, 16, 16, 0, part.angle)}}"'+'        ng-repeat="part in vm.parts" ng-attr-transform="rotate({{part.offset}} 16 16)"'+"        ng-attr-foo=\"{{part.start + ' ' + part.end}}\""+'        fill="{{part.color}}"/>'+"<g ng-transclude></g>"+"</svg>"}else{e='<svg viewBox="0 0 32 32" ng-style="{\'background-color\': vm.color}">'+'<circle ng-if="part.value" id="circle-{{$index}}" r="16" cx="16" cy="16" '+'        ng-repeat="part in vm.parts" ng-attr-transform="rotate({{part.offset}})" '+'        stroke="{{part.color}}" ng-attr-stroke-dasharray="{{part.value}} 100" />'+"<g ng-transclude></g>"+"</svg>"}t.component("piechart",{template:e,require:{ngModel:"^ngModel"},bindings:{color:"@"},transclude:true,controller:a,controllerAs:"vm"});function a(r){var t=100;function a(r,t){return r.reduce(function(r,t){return r+t.value},0)}var n=this;function e(){function r(r){return 360*r/100}if(n.ngModel.$modelValue){n.parts=n.ngModel.$modelValue.data.slice();n.color=n.ngModel.$modelValue.color;var t=a(n.parts);for(var e=0;e<n.parts.length;++e){n.parts[e].angle=r(n.parts[e].value);n.parts[e].offset=Math.round(r(a(n.parts.slice(0,e))))}}}r.$watch(function(){return n.ngModel.$modelValue},e,true);n.arc=o}a.$inject=["$scope"];return t});